import List
import open Parser
import Parsing

module Feeder
    pub let withFeeder {Tok}
		   (xs : List Tok)
		   (eof : Tok)
		   (f : {E} -> Parsing.Lex E Tok -> [E] _) =
	handle lex = Parsing.Lex
	    { token = effect () / r =>
		fn ys =>
		    match ys with
		    | [] => r eof ys
		    | y :: ys => r y ys
		    end
	    , curPos = effect () / r => fn ys => r Parsing.dummyPos ys
	    , startPos = effect () / r => fn ys => r Parsing.dummyPos ys }
	    return x => fn _ => x
	    finally f => f xs
	in f lex
end

let tests =
    [[INT 2, PLUS, INT 3],
     [INT 8, STAR, INT 3, STAR, INT 89, PLUS, INT 1],
     [LPAREN, INT 9, PLUS, INT 1, RPAREN, SLASH, INT 5],
     [INT 4, SLASH, INT 0],
     [INT 1, PLUS, INT 4, CARET, INT 3, CARET, INT 2, PERCENT, INT 5],
     [LPAREN, INT 1, PLUS, INT 4, CARET, INT 3, CARET, INT 2, RPAREN, PERCENT, INT 5]]

let execTest xs =
    let res = Feeder.withFeeder xs
			        EOF
				(fn lex => main {~lex = lex} ()) in
    match res with
    | Left s => printStrLn s
    | Right n => printInt n ; printStrLn ""
    end

# let _ = List.iter execTest tests
