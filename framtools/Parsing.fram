{# This file should be placed in the same directory as the generated
   parser #}

pub data Pos = Pos of
    { fname : String
    , lnum : Int
    , bol : Int
    , cnum : Int }

pub let dummyPos = Pos {fname = "", lnum = 0, bol = 0, cnum = 0-1}

pub data Lex E Tok = Lex of
    { token  : Unit ->[E] Tok
    , startPos : Unit ->[E] Pos
    , curPos : Unit -> [E] Pos }

pub method token {E, Tok} (Lex {token} : Lex E Tok) = token
pub method startPos {E, Tok} (Lex {startPos} : Lex E Tok) = startPos
pub method curPos {E, Tok} (Lex {curPos} : Lex E Tok) = curPos

pub data Error E = Error of ({type X} -> String ->[E] X)
pub method parseError {E} (Error f : Error E) = f

{## Error-reporting function. Use this function to report errors
    in semantic actions. If an error is reported, the result
    returned by the parser will be the passed string wrapped in
    a `Left` constructor. ##}
pub let error {E, ~error : Error E} s = ~error.parseError s
